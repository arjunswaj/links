var search_data = {"index":{"searchIndex":["ad","api","v1","bookmarkscontroller","groupscontroller","searchescontroller","applicationcontroller","applicationhelper","bookmark","bookmarkscontroller","bookmarkshelper","deliciouscontroller","delicioushelper","group","groupscontroller","groupshelper","imageuploader","links","application","logger","membership","object","pagescontroller","pageshelper","searchescontroller","searcheshelper","share","simplenavigation","tag","url","urlscontroller","urlshelper","user","userscontroller","usershelper","about()","accept_invite()","accept_invite()","after_sign_in_path_for()","authorize()","bookmark_params()","bookmarklet()","bookmarks_formatter()","bookmarks_formatter()","bookmarks_formatter()","bookmarks_in_group_searcher()","bookmarks_in_groups_tag_searcher()","bookmarks_loader()","bookmarks_searcher()","bookmarks_tag_searcher()","cancel_invite()","configure_permitted_parameters()","contact()","create()","create()","create()","deletebookmark()","destroy()","destroy()","destroy()","edit()","edit()","edit()","editbookmark()","get_annotations()","group_bookmarks_loader()","group_invites()","group_invites()","group_member?()","group_member?()","group_owner?()","group_owner?()","group_params()","groups_formatter()","import()","index()","index()","index()","index()","index()","index()","invite_users()","link_params()","link_search_params()","loadmore()","loadmore()","loadmore()","members()","new()","new()","new()","owned_groups()","pending_members()","pending_members()","process_uri()","receiver()","reject_invite()","remove_user()","requests()","save_bookmark_params()","save_bookmark_params()","savebookmark()","savebookmark()","savebookmark()","saveurl()","search_bookmark()","search_bookmark()","search_bookmark_in_groups()","search_user()","searchmore()","searchmore()","searchmore_in_groups()","set_bookmark()","set_client_details()","set_group()","set_group()","set_url()","share_bookmark_to_groups()","share_bookmark_to_groups()","share_params()","share_to_group_params()","share_to_group_params()","shareable_groups()","show()","show()","show()","show()","show_image()","store_dir()","strip_bookmark_to_json()","strip_bookmark_to_json()","strip_bookmark_to_json()","timeline()","timeline()","timeline()","timeline_bookmark_params()","tools()","unsubscribe()","unsubscribe()","update()","update()","update()","update_bookmark_params()","updatebookmark()","updatebookmark()","url_params()","user_receiver_params()","user_receiver_params()","user_search_params()","readme"],"longSearchIndex":["ad","api","api::v1","api::v1::bookmarkscontroller","api::v1::groupscontroller","api::v1::searchescontroller","applicationcontroller","applicationhelper","bookmark","bookmarkscontroller","bookmarkshelper","deliciouscontroller","delicioushelper","group","groupscontroller","groupshelper","imageuploader","links","links::application","logger","membership","object","pagescontroller","pageshelper","searchescontroller","searcheshelper","share","simplenavigation","tag","url","urlscontroller","urlshelper","user","userscontroller","usershelper","pagescontroller#about()","api::v1::groupscontroller#accept_invite()","groupscontroller#accept_invite()","applicationcontroller#after_sign_in_path_for()","deliciouscontroller#authorize()","bookmarkscontroller#bookmark_params()","bookmarkscontroller#bookmarklet()","api::v1::bookmarkscontroller#bookmarks_formatter()","api::v1::groupscontroller#bookmarks_formatter()","api::v1::searchescontroller#bookmarks_formatter()","searcheshelper#bookmarks_in_group_searcher()","searcheshelper#bookmarks_in_groups_tag_searcher()","bookmarkshelper#bookmarks_loader()","searcheshelper#bookmarks_searcher()","searcheshelper#bookmarks_tag_searcher()","groupscontroller#cancel_invite()","applicationcontroller#configure_permitted_parameters()","pagescontroller#contact()","bookmarkscontroller#create()","groupscontroller#create()","urlscontroller#create()","api::v1::bookmarkscontroller#deletebookmark()","bookmarkscontroller#destroy()","groupscontroller#destroy()","urlscontroller#destroy()","bookmarkscontroller#edit()","groupscontroller#edit()","urlscontroller#edit()","bookmarkscontroller#editbookmark()","applicationcontroller#get_annotations()","groupshelper#group_bookmarks_loader()","groupscontroller::group_invites()","groupscontroller#group_invites()","api::v1::groupscontroller#group_member?()","groupscontroller::group_member?()","api::v1::groupscontroller#group_owner?()","groupscontroller::group_owner?()","groupscontroller#group_params()","api::v1::groupscontroller#groups_formatter()","deliciouscontroller#import()","api::v1::bookmarkscontroller#index()","api::v1::groupscontroller#index()","bookmarkscontroller#index()","groupscontroller#index()","searchescontroller#index()","urlscontroller#index()","groupscontroller#invite_users()","bookmarkscontroller#link_params()","searchescontroller#link_search_params()","api::v1::bookmarkscontroller#loadmore()","api::v1::groupscontroller#loadmore()","bookmarkscontroller#loadmore()","groupscontroller#members()","bookmarkscontroller#new()","groupscontroller#new()","urlscontroller#new()","groupscontroller#owned_groups()","groupscontroller#pending_members()","groupscontroller::pending_members()","applicationcontroller#process_uri()","searchescontroller#receiver()","api::v1::groupscontroller#reject_invite()","groupscontroller#remove_user()","api::v1::groupscontroller#requests()","api::v1::bookmarkscontroller#save_bookmark_params()","api::v1::groupscontroller#save_bookmark_params()","api::v1::bookmarkscontroller#savebookmark()","api::v1::groupscontroller#savebookmark()","bookmarkscontroller#savebookmark()","bookmarkscontroller#saveurl()","api::v1::searchescontroller#search_bookmark()","searchescontroller#search_bookmark()","api::v1::searchescontroller#search_bookmark_in_groups()","searchescontroller#search_user()","api::v1::searchescontroller#searchmore()","searchescontroller#searchmore()","api::v1::searchescontroller#searchmore_in_groups()","bookmarkscontroller#set_bookmark()","deliciouscontroller#set_client_details()","api::v1::groupscontroller#set_group()","groupscontroller#set_group()","urlscontroller#set_url()","api::v1::bookmarkscontroller#share_bookmark_to_groups()","bookmarkscontroller#share_bookmark_to_groups()","groupscontroller#share_params()","api::v1::bookmarkscontroller#share_to_group_params()","bookmarkscontroller#share_to_group_params()","groupscontroller#shareable_groups()","bookmarkscontroller#show()","groupscontroller#show()","urlscontroller#show()","userscontroller#show()","bookmarkscontroller#show_image()","imageuploader#store_dir()","api::v1::bookmarkscontroller#strip_bookmark_to_json()","api::v1::groupscontroller#strip_bookmark_to_json()","api::v1::searchescontroller#strip_bookmark_to_json()","api::v1::bookmarkscontroller#timeline()","api::v1::groupscontroller#timeline()","bookmarkscontroller#timeline()","bookmarkscontroller#timeline_bookmark_params()","pagescontroller#tools()","api::v1::groupscontroller#unsubscribe()","groupscontroller#unsubscribe()","bookmarkscontroller#update()","groupscontroller#update()","urlscontroller#update()","api::v1::bookmarkscontroller#update_bookmark_params()","api::v1::bookmarkscontroller#updatebookmark()","bookmarkscontroller#updatebookmark()","urlscontroller#url_params()","groupscontroller#user_receiver_params()","searchescontroller#user_receiver_params()","searchescontroller#user_search_params()",""],"info":[["Ad","","Ad.html","",""],["Api","","Api.html","",""],["Api::V1","","Api/V1.html","",""],["Api::V1::BookmarksController","","Api/V1/BookmarksController.html","","<p>Controller for handling all operations related to Bookmarks via REST API\n"],["Api::V1::GroupsController","","Api/V1/GroupsController.html","","<p>Controller for handling all operations related to Groups via REST API\n"],["Api::V1::SearchesController","","Api/V1/SearchesController.html","","<p>Controller for handling all operations related to Searches via REST API\n"],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["Bookmark","","Bookmark.html","",""],["BookmarksController","","BookmarksController.html","","<p>Controller for handling all operations related to Bookmarks\n"],["BookmarksHelper","","BookmarksHelper.html","",""],["DeliciousController","","DeliciousController.html","","<p>TODO: error handling\n"],["DeliciousHelper","","DeliciousHelper.html","",""],["Group","","Group.html","",""],["GroupsController","","GroupsController.html","",""],["GroupsHelper","","GroupsHelper.html","",""],["ImageUploader","","ImageUploader.html","",""],["Links","","Links.html","",""],["Links::Application","","Links/Application.html","",""],["Logger","","Logger.html","",""],["Membership","","Membership.html","",""],["Object","","Object.html","",""],["PagesController","","PagesController.html","",""],["PagesHelper","","PagesHelper.html","",""],["SearchesController","","SearchesController.html","","<p>Controller for handling all operations related to Searches\n"],["SearchesHelper","","SearchesHelper.html","",""],["Share","","Share.html","",""],["SimpleNavigation","","SimpleNavigation.html","",""],["Tag","","Tag.html","",""],["Url","","Url.html","",""],["UrlsController","","UrlsController.html","",""],["UrlsHelper","","UrlsHelper.html","",""],["User","","User.html","",""],["UsersController","","UsersController.html","",""],["UsersHelper","","UsersHelper.html","",""],["about","PagesController","PagesController.html#method-i-about","()",""],["accept_invite","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-accept_invite","()","<p>Accepts the invite to a group\n"],["accept_invite","GroupsController","GroupsController.html#method-i-accept_invite","()","<p>PUT /groups/1/add_user/1 PUT /groups/1/add_user/1.json\n"],["after_sign_in_path_for","ApplicationController","ApplicationController.html#method-i-after_sign_in_path_for","(resource)","<p>If your model is called User\n"],["authorize","DeliciousController","DeliciousController.html#method-i-authorize","()",""],["bookmark_params","BookmarksController","BookmarksController.html#method-i-bookmark_params","()","<p>Never trust parameters from the scary internet, only allow the white list\nthrough.\n"],["bookmarklet","BookmarksController","BookmarksController.html#method-i-bookmarklet","()","<p>This is used to save bookmarks from the bookmarklet\n"],["bookmarks_formatter","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-bookmarks_formatter","()","<p>Formats the bookmarks to a JSON\n"],["bookmarks_formatter","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-bookmarks_formatter","()","<p>Formats the bookmarks into a JSON\n"],["bookmarks_formatter","Api::V1::SearchesController","Api/V1/SearchesController.html#method-i-bookmarks_formatter","()","<p>Formats the bookmarks to a JSON\n"],["bookmarks_in_group_searcher","SearchesHelper","SearchesHelper.html#method-i-bookmarks_in_group_searcher","(time, keyword, group_id)",""],["bookmarks_in_groups_tag_searcher","SearchesHelper","SearchesHelper.html#method-i-bookmarks_in_groups_tag_searcher","(time, keyword, group_id)",""],["bookmarks_loader","BookmarksHelper","BookmarksHelper.html#method-i-bookmarks_loader","(time, user_id)","<p>Loads the bookmarks Params:\n<p>time &mdash; Time instant below which the bookmarks has to be loaded\n<p>user_id &mdash; User  …\n"],["bookmarks_searcher","SearchesHelper","SearchesHelper.html#method-i-bookmarks_searcher","(time, keyword, user_id)",""],["bookmarks_tag_searcher","SearchesHelper","SearchesHelper.html#method-i-bookmarks_tag_searcher","(time, keyword, user_id)",""],["cancel_invite","GroupsController","GroupsController.html#method-i-cancel_invite","()","<p>DELETE /groups/1/users/2/cancel DELETE /groups/1/users/2/cancel.json\n"],["configure_permitted_parameters","ApplicationController","ApplicationController.html#method-i-configure_permitted_parameters","()",""],["contact","PagesController","PagesController.html#method-i-contact","()",""],["create","BookmarksController","BookmarksController.html#method-i-create","()","<p>POST /bookmarks POST /bookmarks.json\n"],["create","GroupsController","GroupsController.html#method-i-create","()","<p>POST /groups POST /groups.json\n"],["create","UrlsController","UrlsController.html#method-i-create","()","<p>POST /urls POST /urls.json\n"],["deletebookmark","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-deletebookmark","()","<p>Deletes the bookmarks based on the bookmark id\n"],["destroy","BookmarksController","BookmarksController.html#method-i-destroy","()","<p>DELETE /bookmarks/1 DELETE /bookmarks/1.json\n"],["destroy","GroupsController","GroupsController.html#method-i-destroy","()","<p>DELETE /groups/1 DELETE /groups/1.json\n"],["destroy","UrlsController","UrlsController.html#method-i-destroy","()","<p>DELETE /urls/1 DELETE /urls/1.json\n"],["edit","BookmarksController","BookmarksController.html#method-i-edit","()","<p>GET /bookmarks/1/edit\n"],["edit","GroupsController","GroupsController.html#method-i-edit","()","<p>GET /groups/1/edit\n"],["edit","UrlsController","UrlsController.html#method-i-edit","()","<p>GET /urls/1/edit\n"],["editbookmark","BookmarksController","BookmarksController.html#method-i-editbookmark","()","<p>Handles the editing of bookmarks This is an async call\n"],["get_annotations","ApplicationController","ApplicationController.html#method-i-get_annotations","(url)","<p>def configure_permitted_parameters\n\n<pre>devise_parameter_sanitizer.for(:sign_up) &lt;&lt; :name\ndevise_parameter_sanitizer.for(:account_update) ...</pre>\n"],["group_bookmarks_loader","GroupsHelper","GroupsHelper.html#method-i-group_bookmarks_loader","(time, group_id)",""],["group_invites","GroupsController","GroupsController.html#method-c-group_invites","(user)",""],["group_invites","GroupsController","GroupsController.html#method-i-group_invites","()",""],["group_member?","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-group_member-3F","(user_id, group_id)","<p>Identifies if the user is group member or not Params:\n<p>user_id &mdash; User id to be checked\n<p>group_id &mdash; Group id to …\n"],["group_member?","GroupsController","GroupsController.html#method-c-group_member-3F","(user_id, group_id)",""],["group_owner?","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-group_owner-3F","(user_id, group_id)","<p>Identifies if the user is group owner or not Params:\n<p>user_id &mdash; User id to be checked\n<p>group_id &mdash; Group id to …\n"],["group_owner?","GroupsController","GroupsController.html#method-c-group_owner-3F","(owner_id, group_id)",""],["group_params","GroupsController","GroupsController.html#method-i-group_params","()","<p>Never trust parameters from the scary internet, only allow the white list\nthrough.\n"],["groups_formatter","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-groups_formatter","(groups)","<p>Converts Groups to JSON\n"],["import","DeliciousController","DeliciousController.html#method-i-import","()",""],["index","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-index","()","<p>Loads all the bookmarks for the timeline Formats the bookmarks into a JSON\nThis is NOT paginated, Use …\n"],["index","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-index","()","<p>Loads all the groups\n"],["index","BookmarksController","BookmarksController.html#method-i-index","()","<p>GET /bookmarks GET /bookmarks.json Loads the bookmarks This is paginated\n"],["index","GroupsController","GroupsController.html#method-i-index","()","<p>GET /groups\n"],["index","SearchesController","SearchesController.html#method-i-index","()",""],["index","UrlsController","UrlsController.html#method-i-index","()","<p>GET /urls GET /urls.json\n"],["invite_users","GroupsController","GroupsController.html#method-i-invite_users","()","<p>POST /groups/1/invite_users POST /groups/1/invite_users.json\n"],["link_params","BookmarksController","BookmarksController.html#method-i-link_params","()","<p>Util to get link params\n"],["link_search_params","SearchesController","SearchesController.html#method-i-link_search_params","()","<p>Utility to fetch link params\n"],["loadmore","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-loadmore","()","<p>Loads more bookmarks for the timeline Formats the bookmarks into a JSON\nThis is paginated\n"],["loadmore","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-loadmore","()","<p>Loads more groups This is paginated\n"],["loadmore","BookmarksController","BookmarksController.html#method-i-loadmore","()","<p>Loads more bookmarks This is paginated\n"],["members","GroupsController","GroupsController.html#method-i-members","()",""],["new","BookmarksController","BookmarksController.html#method-i-new","()","<p>GET /bookmarks/new\n"],["new","GroupsController","GroupsController.html#method-i-new","()","<p>GET /groups/new\n"],["new","UrlsController","UrlsController.html#method-i-new","()","<p>GET /urls/new\n"],["owned_groups","GroupsController","GroupsController.html#method-i-owned_groups","()",""],["pending_members","GroupsController","GroupsController.html#method-i-pending_members","()",""],["pending_members","GroupsController","GroupsController.html#method-c-pending_members","(group_id, owner_id)",""],["process_uri","ApplicationController","ApplicationController.html#method-i-process_uri","(uri)",""],["receiver","SearchesController","SearchesController.html#method-i-receiver","()","<p>Utility to fetch email id\n"],["reject_invite","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-reject_invite","()","<p>Rejects the invite to a group\n"],["remove_user","GroupsController","GroupsController.html#method-i-remove_user","()","<p>DELETE /groups/1/users/2 DELETE /groups/1/users/2.json\n"],["requests","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-requests","()","<p>Loads all the group requests\n"],["save_bookmark_params","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-save_bookmark_params","()","<p>Util to get bookmark params while saving\n"],["save_bookmark_params","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-save_bookmark_params","()","<p>Util to get bookmark params\n"],["savebookmark","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-savebookmark","()","<p>Persists the Bookmark as follows:\n<p>Saves the URL if not present\n<p>Saves the bookmark object\n"],["savebookmark","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-savebookmark","()","<p>Saves a bookmark in a group as follows:\n<p>Saves the URL if not present\n<p>Saves the bookmark object\n"],["savebookmark","BookmarksController","BookmarksController.html#method-i-savebookmark","()","<p>TODO: Do a check whether the URL and Bookmark actually belongs to user or\nnot Sets the plugin info Persists …\n"],["saveurl","BookmarksController","BookmarksController.html#method-i-saveurl","()","<p>Persists the URL as follows:\n<p>Saves the URL if not present\n<p>Adds the http:// if not present\n"],["search_bookmark","Api::V1::SearchesController","Api/V1/SearchesController.html#method-i-search_bookmark","()","<p>Searches bookmark based on bookmark contents This is paginated\n"],["search_bookmark","SearchesController","SearchesController.html#method-i-search_bookmark","()","<p>Searches bookmark based on bookmark contents This is paginated\n"],["search_bookmark_in_groups","Api::V1::SearchesController","Api/V1/SearchesController.html#method-i-search_bookmark_in_groups","()","<p>Searches bookmarks in a group based on bookmark contents This is paginated\n"],["search_user","SearchesController","SearchesController.html#method-i-search_user","()","<p>Searches user based on email id\n"],["searchmore","Api::V1::SearchesController","Api/V1/SearchesController.html#method-i-searchmore","()","<p>Searches more bookmarks based on bookmark contents This is paginated\n"],["searchmore","SearchesController","SearchesController.html#method-i-searchmore","()","<p>Searches more bookmarks based on bookmark contents This is paginated\n"],["searchmore_in_groups","Api::V1::SearchesController","Api/V1/SearchesController.html#method-i-searchmore_in_groups","()","<p>Searches more bookmarks in a group based on bookmark contents This is\npaginated\n"],["set_bookmark","BookmarksController","BookmarksController.html#method-i-set_bookmark","()","<p>Use callbacks to share common setup or constraints between actions.\n"],["set_client_details","DeliciousController","DeliciousController.html#method-i-set_client_details","()",""],["set_group","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-set_group","(group_id)","<p>Loads group object based on group id Params:\n<p>group_id &mdash; ID of group that has to be loaded\n\n"],["set_group","GroupsController","GroupsController.html#method-i-set_group","()",""],["set_url","UrlsController","UrlsController.html#method-i-set_url","()","<p>Use callbacks to share common setup or constraints between actions.\n"],["share_bookmark_to_groups","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-share_bookmark_to_groups","()","<p>Shares the bookmarks to set of groups Params to be passed:\n<p>bookmark id of the bookmark\n<p>array of group ids …\n"],["share_bookmark_to_groups","BookmarksController","BookmarksController.html#method-i-share_bookmark_to_groups","()","<p>Shares Bookmarks to Groups as follows:\n<p>Copies the bookmark\n<p>Save the copy to a group\n"],["share_params","GroupsController","GroupsController.html#method-i-share_params","()",""],["share_to_group_params","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-share_to_group_params","()","<p>Util to get bookmark params while sharing to groups\n"],["share_to_group_params","BookmarksController","BookmarksController.html#method-i-share_to_group_params","()","<p>Util to get params when shared to groups\n"],["shareable_groups","GroupsController","GroupsController.html#method-i-shareable_groups","()",""],["show","BookmarksController","BookmarksController.html#method-i-show","()","<p>GET /bookmarks/1 GET /bookmarks/1.json\n"],["show","GroupsController","GroupsController.html#method-i-show","()","<p>GET /groups/1 GET /groups/1.json if an invite comes, a user must be able to\nvisit the group and check …\n"],["show","UrlsController","UrlsController.html#method-i-show","()","<p>GET /urls/1 GET /urls/1.json\n"],["show","UsersController","UsersController.html#method-i-show","()",""],["show_image","BookmarksController","BookmarksController.html#method-i-show_image","()","<p>Shows the image\n"],["store_dir","ImageUploader","ImageUploader.html#method-i-store_dir","()","<p>Override the directory where uploaded files will be stored. This is a\nsensible default for uploaders …\n"],["strip_bookmark_to_json","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-strip_bookmark_to_json","(bookmark)","<p>Strips the unwanted data off the bookmarks object Params:\n<p>bookmark &mdash; The bookmark object from ActiveModel …\n\n"],["strip_bookmark_to_json","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-strip_bookmark_to_json","(bookmark)","<p>Strips the unwanted data off the bookmarks object Params:\n<p>bookmark &mdash; The bookmark object from ActiveModel …\n\n"],["strip_bookmark_to_json","Api::V1::SearchesController","Api/V1/SearchesController.html#method-i-strip_bookmark_to_json","(bookmark)","<p>Strips the unwanted data off the bookmarks object Params:\n<p>bookmark &mdash; The bookmark object from ActiveModel …\n\n"],["timeline","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-timeline","()","<p>Loads the bookmarks for the timeline Formats the bookmarks into a JSON This\nis paginated\n"],["timeline","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-timeline","()","<p>Loads the groups This is paginated\n"],["timeline","BookmarksController","BookmarksController.html#method-i-timeline","()","<p>Initializes the bookmarks for the timeline page\n"],["timeline_bookmark_params","BookmarksController","BookmarksController.html#method-i-timeline_bookmark_params","()","<p>Util to get bookmark params in timeline\n"],["tools","PagesController","PagesController.html#method-i-tools","()",""],["unsubscribe","Api::V1::GroupsController","Api/V1/GroupsController.html#method-i-unsubscribe","()","<p>Unsubscribe the subscription to a group\n"],["unsubscribe","GroupsController","GroupsController.html#method-i-unsubscribe","()","<p>POST /groups/1/unsubscribe POST /groups/1/unsubscribe.json\n"],["update","BookmarksController","BookmarksController.html#method-i-update","()","<p>PATCH/PUT /bookmarks/1 PATCH/PUT /bookmarks/1.json\n"],["update","GroupsController","GroupsController.html#method-i-update","()","<p>PATCH/PUT /groups/1 PATCH/PUT /groups/1.json\n"],["update","UrlsController","UrlsController.html#method-i-update","()","<p>PATCH/PUT /urls/1 PATCH/PUT /urls/1.json\n"],["update_bookmark_params","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-update_bookmark_params","()","<p>Util to get bookmark params while updating\n"],["updatebookmark","Api::V1::BookmarksController","Api/V1/BookmarksController.html#method-i-updatebookmark","()","<p>Updates the Bookmark as follows:\n<p>Saves the new URL if not present\n<p>Updates the bookmark object\n"],["updatebookmark","BookmarksController","BookmarksController.html#method-i-updatebookmark","()","<p>Sets the plugin info Updates the Bookmark as follows:\n<p>Saves the new URL if not present\n<p>Updates the bookmark …\n"],["url_params","UrlsController","UrlsController.html#method-i-url_params","()","<p>Never trust parameters from the scary internet, only allow the white list\nthrough.\n"],["user_receiver_params","GroupsController","GroupsController.html#method-i-user_receiver_params","()",""],["user_receiver_params","SearchesController","SearchesController.html#method-i-user_receiver_params","()","<p>Utility to fetch user params\n"],["user_search_params","SearchesController","SearchesController.html#method-i-user_search_params","()","<p>Utility to fetch user search params\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}